{"ast":null,"code":"var _jsxFileName = \"/Users/luke.mackenzie/Documents/personal/nextjs/pages/index.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nimport Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport withLayout from \"../components/Layout\";\nimport fetch from \"isomorphic-unfetch\";\n\nvar PostLink = function PostLink(props) {\n  return React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(Link, {\n    href: \"/p/[id]\",\n    as: \"/p/\".concat(post.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, post.title)));\n}; // export default function Blog() {\n//   return (\n//     <Layout>\n//       <h1>My Blog</h1>\n//       <ul>\n//         <PostLink title=\"Hello Next.js\" />\n//         <PostLink title=\"Learn Next.js is awesome\" />\n//         <PostLink title=\"Deploy apps with Zeit\" />\n//         <PostLink id=\"id: Hello Next.js\" />\n//         <PostLink id=\"id: Learn Next.js is awesome\" />\n//         <PostLink id=\"id: Deploy apps with Zeit\" />\n//       </ul>\n//     </Layout>\n//   );\n// }\n// export default withLayout(Blog);\n// const Index = props => (\n//   <Layout>\n//     <h1>Batman TV Shows</h1>\n//     <ul>\n//       {props.shows.map(show => (\n//         <li key={show.id}>\n//           <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n//             <a>{show.name}</a>\n//           </Link>\n//         </li>\n//       ))}\n//     </ul>\n//   </Layout>\n// );\n// Index.getInitialProps = async function() {\n//   const res = await fetch(\"https://api.tvmaze.com/search/shows?q=batman\");\n//   const data = await res.json();\n//   // this will print on the SERVER console, not the browser console.\n//   // That's because we render the page on the server. So, we already have the data and there is no reason to fetch it again in the client.\n//   console.log(`Show data fetched. Count: ${data.length}`);\n//   return {\n//     shows: data.map(entry => entry.show)\n//   };\n// };\n// export default Index;\n// STYLING EXAMPLE\n\n\nfunction getPosts() {\n  return [{\n    id: \"hello-nextjs\",\n    title: \"Hello Next.js\"\n  }, {\n    id: \"learn-nextjs\",\n    title: \"Learn Next.js is awesome\"\n  }, {\n    id: \"deploy-nextjs\",\n    title: \"Deploy apps with ZEIT\"\n  }];\n}\n\nexport default function Blog() {\n  var opacity = 0.6;\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: _JSXStyle.dynamic([[\"4013636451\", [opacity]]]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"My Blog\"), React.createElement(\"ul\", {\n    className: _JSXStyle.dynamic([[\"4013636451\", [opacity]]]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, getPosts().map(function (post) {\n    return React.createElement(\"li\", {\n      key: post.id,\n      className: _JSXStyle.dynamic([[\"4013636451\", [opacity]]]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(post.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: _JSXStyle.dynamic([[\"4013636451\", [opacity]]]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, post.title)));\n  })), React.createElement(_JSXStyle, {\n    id: \"4013636451\",\n    dynamic: [opacity],\n    __self: this\n  }, \"h1.__jsx-style-dynamic-selector,a.__jsx-style-dynamic-selector{font-family:\\\"Arial\\\";}ul.__jsx-style-dynamic-selector{padding:0;}li.__jsx-style-dynamic-selector{list-style:none;margin:5px 0;}a.__jsx-style-dynamic-selector{-webkit-text-decoration:none;text-decoration:none;color:blue;}a.__jsx-style-dynamic-selector:hover{opacity:\".concat(opacity, \";}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWtlLm1hY2tlbnppZS9Eb2N1bWVudHMvcGVyc29uYWwvbmV4dGpzL3BhZ2VzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJGa0IsQUFJK0IsQUFJVixBQUlNLEFBS0ssQUFLZ0IsVUFidkMsTUFJZSxJQVJmLFNBU0EsUUFTQSxhQUxhLFdBQ2IiLCJmaWxlIjoiL1VzZXJzL2x1a2UubWFja2VuemllL0RvY3VtZW50cy9wZXJzb25hbC9uZXh0anMvcGFnZXMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XG5pbXBvcnQgTGF5b3V0IGZyb20gXCIuLi9jb21wb25lbnRzL0xheW91dFwiO1xuaW1wb3J0IHdpdGhMYXlvdXQgZnJvbSBcIi4uL2NvbXBvbmVudHMvTGF5b3V0XCI7XG5pbXBvcnQgZmV0Y2ggZnJvbSBcImlzb21vcnBoaWMtdW5mZXRjaFwiO1xuXG5jb25zdCBQb3N0TGluayA9IHByb3BzID0+IChcbiAgPGxpPlxuICAgIHsvKiBoZXJlIHdlIGFyZSBwYXNzaW5nIGRhdGEgdmlhIGEgcXVlcnkgc3RyaW5nIHBhcmFtZXRlciAoaS5lLiAndGl0bGUnKSAqL31cbiAgICB7LyogPExpbmsgaHJlZj17YC9wb3N0P3RpdGxlPSR7cHJvcHMudGl0bGV9YH0+XG4gICAgICA8YT57cHJvcHMudGl0bGV9PC9hPlxuICAgIDwvTGluaz4gKi99XG4gICAgey8qICdhcycgZGVmaW5lcyB0aGUgVVJMIHRvIHNob3cgKi99XG4gICAgey8qIDxMaW5rIGhyZWY9XCIvcC9baWRdXCIgYXM9e2AvcC8ke3Byb3BzLmlkfWB9PlxuICAgICAgPGE+e3Byb3BzLmlkfTwvYT5cbiAgICA8L0xpbms+ICovfVxuICAgIDxMaW5rIGhyZWY9XCIvcC9baWRdXCIgYXM9e2AvcC8ke3Bvc3QuaWR9YH0+XG4gICAgICA8YT57cG9zdC50aXRsZX08L2E+XG4gICAgPC9MaW5rPlxuICA8L2xpPlxuKTtcbi8vIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJsb2coKSB7XG4vLyAgIHJldHVybiAoXG4vLyAgICAgPExheW91dD5cbi8vICAgICAgIDxoMT5NeSBCbG9nPC9oMT5cbi8vICAgICAgIDx1bD5cbi8vICAgICAgICAgPFBvc3RMaW5rIHRpdGxlPVwiSGVsbG8gTmV4dC5qc1wiIC8+XG4vLyAgICAgICAgIDxQb3N0TGluayB0aXRsZT1cIkxlYXJuIE5leHQuanMgaXMgYXdlc29tZVwiIC8+XG4vLyAgICAgICAgIDxQb3N0TGluayB0aXRsZT1cIkRlcGxveSBhcHBzIHdpdGggWmVpdFwiIC8+XG4vLyAgICAgICAgIDxQb3N0TGluayBpZD1cImlkOiBIZWxsbyBOZXh0LmpzXCIgLz5cbi8vICAgICAgICAgPFBvc3RMaW5rIGlkPVwiaWQ6IExlYXJuIE5leHQuanMgaXMgYXdlc29tZVwiIC8+XG4vLyAgICAgICAgIDxQb3N0TGluayBpZD1cImlkOiBEZXBsb3kgYXBwcyB3aXRoIFplaXRcIiAvPlxuLy8gICAgICAgPC91bD5cbi8vICAgICA8L0xheW91dD5cbi8vICAgKTtcbi8vIH1cblxuLy8gZXhwb3J0IGRlZmF1bHQgd2l0aExheW91dChCbG9nKTtcblxuLy8gY29uc3QgSW5kZXggPSBwcm9wcyA9PiAoXG4vLyAgIDxMYXlvdXQ+XG4vLyAgICAgPGgxPkJhdG1hbiBUViBTaG93czwvaDE+XG4vLyAgICAgPHVsPlxuLy8gICAgICAge3Byb3BzLnNob3dzLm1hcChzaG93ID0+IChcbi8vICAgICAgICAgPGxpIGtleT17c2hvdy5pZH0+XG4vLyAgICAgICAgICAgPExpbmsgaHJlZj1cIi9wL1tpZF1cIiBhcz17YC9wLyR7c2hvdy5pZH1gfT5cbi8vICAgICAgICAgICAgIDxhPntzaG93Lm5hbWV9PC9hPlxuLy8gICAgICAgICAgIDwvTGluaz5cbi8vICAgICAgICAgPC9saT5cbi8vICAgICAgICkpfVxuLy8gICAgIDwvdWw+XG4vLyAgIDwvTGF5b3V0PlxuLy8gKTtcblxuLy8gSW5kZXguZ2V0SW5pdGlhbFByb3BzID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4vLyAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9hcGkudHZtYXplLmNvbS9zZWFyY2gvc2hvd3M/cT1iYXRtYW5cIik7XG4vLyAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuXG4vLyAgIC8vIHRoaXMgd2lsbCBwcmludCBvbiB0aGUgU0VSVkVSIGNvbnNvbGUsIG5vdCB0aGUgYnJvd3NlciBjb25zb2xlLlxuLy8gICAvLyBUaGF0J3MgYmVjYXVzZSB3ZSByZW5kZXIgdGhlIHBhZ2Ugb24gdGhlIHNlcnZlci4gU28sIHdlIGFscmVhZHkgaGF2ZSB0aGUgZGF0YSBhbmQgdGhlcmUgaXMgbm8gcmVhc29uIHRvIGZldGNoIGl0IGFnYWluIGluIHRoZSBjbGllbnQuXG4vLyAgIGNvbnNvbGUubG9nKGBTaG93IGRhdGEgZmV0Y2hlZC4gQ291bnQ6ICR7ZGF0YS5sZW5ndGh9YCk7XG5cbi8vICAgcmV0dXJuIHtcbi8vICAgICBzaG93czogZGF0YS5tYXAoZW50cnkgPT4gZW50cnkuc2hvdylcbi8vICAgfTtcbi8vIH07XG5cbi8vIGV4cG9ydCBkZWZhdWx0IEluZGV4O1xuXG4vLyBTVFlMSU5HIEVYQU1QTEVcbmZ1bmN0aW9uIGdldFBvc3RzKCkge1xuICByZXR1cm4gW1xuICAgIHsgaWQ6IFwiaGVsbG8tbmV4dGpzXCIsIHRpdGxlOiBcIkhlbGxvIE5leHQuanNcIiB9LFxuICAgIHsgaWQ6IFwibGVhcm4tbmV4dGpzXCIsIHRpdGxlOiBcIkxlYXJuIE5leHQuanMgaXMgYXdlc29tZVwiIH0sXG4gICAgeyBpZDogXCJkZXBsb3ktbmV4dGpzXCIsIHRpdGxlOiBcIkRlcGxveSBhcHBzIHdpdGggWkVJVFwiIH1cbiAgXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmxvZygpIHtcbiAgY29uc3Qgb3BhY2l0eSA9IDAuNjtcbiAgcmV0dXJuIChcbiAgICA8TGF5b3V0PlxuICAgICAgPGgxPk15IEJsb2c8L2gxPlxuICAgICAgPHVsPlxuICAgICAgICB7Z2V0UG9zdHMoKS5tYXAocG9zdCA9PiAoXG4gICAgICAgICAgPGxpIGtleT17cG9zdC5pZH0+XG4gICAgICAgICAgICA8TGluayBocmVmPVwiL3AvW2lkXVwiIGFzPXtgL3AvJHtwb3N0LmlkfWB9PlxuICAgICAgICAgICAgICA8YT57cG9zdC50aXRsZX08L2E+XG4gICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKSl9XG4gICAgICA8L3VsPlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICBoMSxcbiAgICAgICAgYSB7XG4gICAgICAgICAgZm9udC1mYW1pbHk6IFwiQXJpYWxcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVsIHtcbiAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgbGkge1xuICAgICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICAgICAgbWFyZ2luOiA1cHggMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGEge1xuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICBjb2xvcjogYmx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGE6aG92ZXIge1xuICAgICAgICAgIG9wYWNpdHk6ICR7b3BhY2l0eX07XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cbiAgICA8L0xheW91dD5cbiAgKTtcbn1cbiJdfQ== */\\n/*@ sourceURL=/Users/luke.mackenzie/Documents/personal/nextjs/pages/index.js */\")));\n}","map":{"version":3,"sources":["/Users/luke.mackenzie/Documents/personal/nextjs/pages/index.js"],"names":["Link","Layout","withLayout","fetch","PostLink","props","post","id","title","getPosts","Blog","opacity","map"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,SAAX;AAAqB,IAAA,EAAE,eAAQC,IAAI,CAACC,EAAb,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,IAAI,CAACE,KAAT,CADF,CATF,CADoB;AAAA,CAAtB,C,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;;;AACA,SAASC,QAAT,GAAoB;AAClB,SAAO,CACL;AAAEF,IAAAA,EAAE,EAAE,cAAN;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GADK,EAEL;AAAED,IAAAA,EAAE,EAAE,cAAN;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GAFK,EAGL;AAAED,IAAAA,EAAE,EAAE,eAAN;AAAuBC,IAAAA,KAAK,EAAE;AAA9B,GAHK,CAAP;AAKD;;AAED,eAAe,SAASE,IAAT,GAAgB;AAC7B,MAAMC,OAAO,GAAG,GAAhB;AACA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,kDA+BeA,OA/Bf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA,kDA8BeA,OA9Bf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QAAQ,GAAGG,GAAX,CAAe,UAAAN,IAAI;AAAA,WAClB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA,oDA4BWI,OA5BX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,EAAE,eAAQL,IAAI,CAACC,EAAb,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA,oDA0BOI,OA1BP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIL,IAAI,CAACE,KAAT,CADF,CADF,CADkB;AAAA,GAAnB,CADH,CAFF;AAAA;AAAA,cAgCiBG,OAhCjB;AAAA;AAAA,wVAgCiBA,OAhCjB,+hJADF;AAsCD","sourcesContent":["import Link from \"next/link\";\nimport Layout from \"../components/Layout\";\nimport withLayout from \"../components/Layout\";\nimport fetch from \"isomorphic-unfetch\";\n\nconst PostLink = props => (\n  <li>\n    {/* here we are passing data via a query string parameter (i.e. 'title') */}\n    {/* <Link href={`/post?title=${props.title}`}>\n      <a>{props.title}</a>\n    </Link> */}\n    {/* 'as' defines the URL to show */}\n    {/* <Link href=\"/p/[id]\" as={`/p/${props.id}`}>\n      <a>{props.id}</a>\n    </Link> */}\n    <Link href=\"/p/[id]\" as={`/p/${post.id}`}>\n      <a>{post.title}</a>\n    </Link>\n  </li>\n);\n// export default function Blog() {\n//   return (\n//     <Layout>\n//       <h1>My Blog</h1>\n//       <ul>\n//         <PostLink title=\"Hello Next.js\" />\n//         <PostLink title=\"Learn Next.js is awesome\" />\n//         <PostLink title=\"Deploy apps with Zeit\" />\n//         <PostLink id=\"id: Hello Next.js\" />\n//         <PostLink id=\"id: Learn Next.js is awesome\" />\n//         <PostLink id=\"id: Deploy apps with Zeit\" />\n//       </ul>\n//     </Layout>\n//   );\n// }\n\n// export default withLayout(Blog);\n\n// const Index = props => (\n//   <Layout>\n//     <h1>Batman TV Shows</h1>\n//     <ul>\n//       {props.shows.map(show => (\n//         <li key={show.id}>\n//           <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n//             <a>{show.name}</a>\n//           </Link>\n//         </li>\n//       ))}\n//     </ul>\n//   </Layout>\n// );\n\n// Index.getInitialProps = async function() {\n//   const res = await fetch(\"https://api.tvmaze.com/search/shows?q=batman\");\n//   const data = await res.json();\n\n//   // this will print on the SERVER console, not the browser console.\n//   // That's because we render the page on the server. So, we already have the data and there is no reason to fetch it again in the client.\n//   console.log(`Show data fetched. Count: ${data.length}`);\n\n//   return {\n//     shows: data.map(entry => entry.show)\n//   };\n// };\n\n// export default Index;\n\n// STYLING EXAMPLE\nfunction getPosts() {\n  return [\n    { id: \"hello-nextjs\", title: \"Hello Next.js\" },\n    { id: \"learn-nextjs\", title: \"Learn Next.js is awesome\" },\n    { id: \"deploy-nextjs\", title: \"Deploy apps with ZEIT\" }\n  ];\n}\n\nexport default function Blog() {\n  const opacity = 0.6;\n  return (\n    <Layout>\n      <h1>My Blog</h1>\n      <ul>\n        {getPosts().map(post => (\n          <li key={post.id}>\n            <Link href=\"/p/[id]\" as={`/p/${post.id}`}>\n              <a>{post.title}</a>\n            </Link>\n          </li>\n        ))}\n      </ul>\n      <style jsx>{`\n        h1,\n        a {\n          font-family: \"Arial\";\n        }\n\n        ul {\n          padding: 0;\n        }\n\n        li {\n          list-style: none;\n          margin: 5px 0;\n        }\n\n        a {\n          text-decoration: none;\n          color: blue;\n        }\n\n        a:hover {\n          opacity: ${opacity};\n        }\n      `}</style>\n    </Layout>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}